import a from"crypto";var r={};var e=a;function sha(a,r,n){return e.createHmac(n,a).update(r).digest("base64")}function rsa(a,r){return e.createSign("RSA-SHA1").update(r).sign(a,"base64")}function rfc3986(a){return encodeURIComponent(a).replace(/!/g,"%21").replace(/\*/g,"%2A").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/'/g,"%27")}function map(a){var r,e,n=[];for(r in a){e=a[r];if(Array.isArray(e))for(var t=0;t<e.length;t++)n.push([r,e[t]]);else if("object"===typeof e)for(var s in e)n.push([r+"["+s+"]",e[s]]);else n.push([r,e])}return n}function compare(a,r){return a>r?1:a<r?-1:0}function generateBase(a,r,e){var n=map(e).map((function(a){return[rfc3986(a[0]),rfc3986(a[1]||"")]})).sort((function(a,r){return compare(a[0],r[0])||compare(a[1],r[1])})).map((function(a){return a.join("=")})).join("&");var t=[rfc3986(a?a.toUpperCase():"GET"),rfc3986(r),rfc3986(n)].join("&");return t}function hmacsign(a,r,e,n,t){var s=generateBase(a,r,e);var c=[n||"",t||""].map(rfc3986).join("&");return sha(c,s,"sha1")}function hmacsign256(a,r,e,n,t){var s=generateBase(a,r,e);var c=[n||"",t||""].map(rfc3986).join("&");return sha(c,s,"sha256")}function rsasign(a,r,e,n,t){var s=generateBase(a,r,e);var c=n||"";return rsa(c,s)}function plaintext(a,r){var e=[a||"",r||""].map(rfc3986).join("&");return e}function sign(a,r,e,n,t,s){var c;var i=1;switch(a){case"RSA-SHA1":c=rsasign;break;case"HMAC-SHA1":c=hmacsign;break;case"HMAC-SHA256":c=hmacsign256;break;case"PLAINTEXT":c=plaintext;i=4;break;default:throw new Error("Signature method not supported: "+a)}return c.apply(null,[].slice.call(arguments,i))}r.hmacsign=hmacsign;r.hmacsign256=hmacsign256;r.rsasign=rsasign;r.plaintext=plaintext;r.sign=sign;r.rfc3986=rfc3986;r.generateBase=generateBase;const n=r.hmacsign,t=r.hmacsign256,s=r.rsasign,c=r.plaintext,i=r.sign,o=r.rfc3986,g=r.generateBase;export default r;export{g as generateBase,n as hmacsign,t as hmacsign256,c as plaintext,o as rfc3986,s as rsasign,i as sign};

